Smart vehicle central gateway system

Project description: City Bus and EV Vehicle Integration The Smart Vehicle Central Gateway System project aims to integrate advanced features and systems from Electric Vehicles (EVs) into City Buses, creating a modern, efficient, and user-friendly transportation solution. 

Hardware component:
Passenger stop request: push button switch, STM32 microcontroller, LED ,LCD, UART ,I2C.
Smoke & Heat detector: Smoke sensor (MQ22), Heat detect sensor(LM35),STM32 Microcontroller, LCD display, LED,UART,I2C.
TPMS(Tire Pressure Monitoring System): TPMS sensor (MPX5700AP),LED,STM32 Microcontroler,UART,I2C.
Hold button: switch, STM32 microcontroller,LED,,LCD,UART,I2C

Passenger stop request:
To implement the feature of passengers' stop requests linked to the Intelligent Transportation System (ITS) on an STM32 microcontroller, 
1. Hardware Components:
a. Push Button Switches: These switches would be installed at various locations inside the bus, allowing passengers to request a stop by pressing them.
b. STM32 Microcontroller: The STM32 microcontroller serves as the central processing unit, responsible for receiving input signals from the push button switches, processing the requests, and communicating with other components of the ITS.
c. LED Indicators: LED indicators can be installed near the driver's console to visually indicate when a stop request is received.
d. TFT LCD (Thin-Film Transistor LCD): These displays offer colour and higher resolution. Example: "2.4" TFT LCD Module.
e. UART Communication Module: A UART communication module enables serial communication between the STM32 microcontroller and the Intelligent Transportation System (ITS) for transmitting stop requests.

2. Configuration Steps:
a. GPIO Configuration: Configure GPIO pins on the STM32 microcontroller to act as inputs to read the state of the push button switches and outputs to control the LED indicators.
b. Interrupt Service Routine (ISR): Set up interrupt service routines to detect when a push button switch is pressed. When a passenger requests a stop by pressing a button, the corresponding GPIO pin generates an interrupt, triggering the ISR.
c. UART Communication Configuration: Configure the UART peripheral on the STM32 microcontroller to establish serial communication with the ITS. Set the appropriate baud rate, data format, and communication protocol.
d. Data Transmission: When a stop request is detected, the STM32 microcontroller prepares a message indicating the request and transmits it to the ITS via UART communication.
e. LED Indication: Upon receiving a stop request, the STM32 microcontroller activates the LED indicators to alert the driver.
Hold button
The hold button feature is designed to provide the driver with the capability to pause or stop certain actions within the city bus system. This functionality is linked to the Intelligent Transportation System (ITS), enabling centralized control and management for improved operational efficiency.
Components Used
1.	STM32 Microcontroller:
o	Description: Central processing unit responsible for interpreting hold button signals and executing corresponding actions.
2.	Hold Button Switch:
o	Description: A momentary push button switch installed within easy reach of the driver.
o	Functionality: When pressed, it sends a signal to the STM32 microcontroller to activate the hold function.
3.	LED Indicator:
o	Description: Visual feedback for the hold button status.
o	Functionality: Illuminates when the hold function is activated, providing confirmation to the driver.
4.	UART Communication Module:
o	Description: Facilitates communication between the STM32 microcontroller and the ITS.
o	Functionality: Allows the STM32 to transmit hold button status information to the ITS for centralized monitoring.
5.	Power Supply:
o	Description: Provides power to the STM32 microcontroller, hold button switch, LED indicator, and other components.
6.	Wiring and Connectors:
o	Description: Used for connecting all components together.
Configuration Steps
1.	GPIO Configuration:
o	Configure GPIO pins on the STM32 for reading the hold button switch input and controlling the LED indicator output.
2.	Hold Button Setup:
o	Connect the hold button switch to a GPIO pin configured as an input with pull-up or pull-down resistor, depending on the button type.
o	Implement interrupt handling to detect when the hold button is pressed.
3.	LED Indicator Setup:
o	Connect an LED to a GPIO pin configured as an output to indicate the hold button status.
o	Toggle the LED state based on the hold button input.
4.	UART Communication Setup:
o	Configure UART to transmit hold button status information to the ITS.
o	Transmit a message indicating the hold button status whenever it changes (pressed or released).


Smoke & Heat Detector
To implement a Smoke & Heat Detector system linked to the Intelligent Transportation System (ITS) on an STM32 microcontroller, 
1. Hardware Components:
a. Smoke and Heat Sensors
•	Smoke Sensor (e.g., MQ-2): Detects the presence of smoke.
•	Heat Sensor (DTH 11
•	): Measures ambient temperature.
Smoke sensor(MQ-2)
The MQ-2 sensor is a gas sensor module that detects a variety of gases such as LPG, propane, hydrogen, smoke, and methane. Here's a breakdown of its complete product details and pin configuration: 
                        
Product Details:
1.	Gas Detection: The MQ-2 sensor detects gases such as LPG, propane, hydrogen, smoke, and methane, making it suitable for gas leakage detection and fire detection applications.
2.	Operating Principle: The sensor operates based on the principle of semiconductor gas sensing. It contains a tin dioxide (SnO2) sensitive layer that changes its resistance when it comes into contact with specific gases.
3.	Sensitivity: The MQ-2 sensor is highly sensitive to the gases it is designed to detect, with a detection range suitable for domestic and industrial applications.
4.	Analog Output: The sensor provides an analog voltage output that varies with the concentration of the detected gas. This output can be read by a microcontroller or ADC (Analog-to-Digital Converter) for further processing.
5.	Warm-up Time: The sensor requires a warm-up time of a few minutes before it can provide stable and accurate readings. This warm-up time should be considered during system initialization.
6.	Compact Size: The MQ-2 sensor is compact in size, making it easy to integrate into various electronic devices and systems.
7.	Low Power Consumption: It operates at a low power consumption level, making it suitable for battery-powered applications.
Pin Configuration:
The MQ-2 sensor typically has four pins for connection:
1.	VCC (Voltage Supply): This pin is connected to the positive terminal of the power supply (usually +5V).
2.	GND (Ground): This pin is connected to the ground of the power supply (0V).
3.	Analog Output: This pin provides the analog voltage output proportional to the concentration of the detected gas. It is connected to an analog input pin of the microcontroller or ADC.
4.	Digital Heater Control (H): This pin is used to control the internal heater of the sensor. Applying a voltage to this pin activates the heater, which is required for the sensor to operate. It is usually connected to a digital output pin of the microcontroller.
Heat Sensor ( DTH 11)
 DHT11 sensor is a widely-used digital temperature and humidity sensor module. 
                                      
1.	Temperature and Humidity Sensing: The DHT11 sensor is capable of measuring temperature and relative humidity.
2.	Output Format: It provides digital output for both temperature and humidity readings, making it easy to interface with microcontrollers.
3.	Operating Range: The DHT11 sensor has a temperature measurement range of 0°C to 50°C with a ±2°C accuracy and a humidity measurement range of 20% to 80% RH with a ±5% accuracy.
4.	Refresh Rate: The sensor has a relatively slow refresh rate, typically taking around 2 seconds to provide a new set of readings.
5.	Low Cost: The DHT11 sensor is relatively inexpensive, making it suitable for cost-sensitive applications.
6.	Simple Interface: It has a simple 3-pin interface consisting of VCC (power supply), GND (ground), and a single digital output pin.
7.	Compact Size: The DHT11 sensor module is compact and lightweight, allowing for easy integration into various projects and applications.
8.	Single-Wire Communication: The sensor communicates with the microcontroller using a single-wire digital protocol, simplifying the interface design.
b. STM32 Microcontroller
•	Acts as the central processing unit for reading sensor data and communicating with the ITS.
c. UART Communication Module
•	Facilitates serial communication between the STM32 microcontroller and the ITS to transmit smoke and heat detection alerts.
d. Buzzer and LED Indicators
•	Provides immediate audible and visual alerts for smoke or heat detection before the data is sent to the ITS.
2. Configuration Steps:
a. GPIO Configuration
•	Inputs:
o	Configure GPIO pins on the STM32 to read the data from the smoke and heat sensors.
•	Outputs:
o	Configure GPIO pins to control the buzzer and LED indicators.
b. ADC (Analog-to-Digital Converter) Configuration
•	Smoke Sensor:
o	The MQ-2 smoke sensor provides an analog output that needs to be read using the ADC.
•	Heat Sensor:
o	The LM35 sensor also provides an analog output, whereas the DHT22 uses a digital interface.
c. UART Communication Configuration
•	Configure the UART peripheral on the STM32 to establish communication with the ITS.
d. Data Processing and Transmission
•	Read the sensor data, process it to detect smoke and heat levels, and transmit alerts to the ITS via UART if thresholds are exceeded.
e. GPIO and I2C Configuration
•	Configure GPIO pins for the I2C interface (e.g., SDA and SCL lines).
•	Configure the ADC for reading the smoke sensor.
•	Configure the I2C peripheral for communication with the LCD.
b. LCD Initialization and Configuration
•	Use an I2C LCD library to simplify communication.
•	Initialize the LCD and set up basic functions for sending data.
c. Reading Sensor Data and Displaying Messages
•	Read data from the sensors.
•	Display messages on the LCD based  on sensor reading.

TPMS (Tire Pressure Monitoring System)
The TPMS is designed to monitor the air pressure inside pneumatic tires and provide real-time information to the driver. This system enhances safety by alerting the driver to under-inflated tires, which can lead to accidents, increased tire wear, and reduced fuel efficiency.
Components of a TPMS
a. Tire Pressure Sensors:
•	Description: These sensors measure the air pressure within each tire and often come with integrated temperature sensors.
•	Examples: Direct TPMS sensors such as those using the MPX5700AP (analog) or digital sensors that use RF communication.
MPX5700AP TPMS sensor:
 

1. Pressure Measurement: The MPX5700AP is capable of measuring absolute pressure, meaning it measures pressure relative to a perfect vacuum. It can accurately measure pressure in various applications.
2. Piezoresistive Technology: This sensor operates based on the piezoresistive effect, where the resistance of certain materials changes when subjected to mechanical stress, such as pressure. The MPX5700AP utilizes this effect to accurately convert pressure into an electrical signal.
3. Rugged Construction: The MPX5700AP is built with a rugged construction, making it suitable for use in demanding environments. It can withstand mechanical shocks, vibrations, and exposure to various chemicals and fluids.
4. High Accuracy: This sensor offers high accuracy in pressure measurements, ensuring precise data acquisition in critical applications where accuracy is paramount.
5. Analog Output: The MPX5700AP provides an analog output signal proportional to the measured pressure. This analog signal can be easily interfaced with microcontrollers, analog-to-digital converters (ADCs), or other control systems for further processing and analysis.
6. Operating Range: It has a wide operating pressure range, allowing it to measure pressures from a few inches of water to several hundred pounds per square inch (psi) or more, depending on the specific model and configuration.
7. Temperature Compensation: The sensor may include built-in temperature compensation to ensure accurate pressure measurements over a wide temperature range. This feature helps maintain measurement accuracy even in temperature-varying environments.
8. Package Type: The MPX5700AP is typically available in a small form factor package, making it suitable for integration into compact electronic systems and devices.
b. STM32 Microcontroller:
•	Description: Serves as the central processing unit that reads sensor data, processes it, and communicates with the ITS.
c. RF Receiver Module (if using RF sensors):
•	Description: Receives the wireless signals transmitted by the TPMS sensors.
•	Examples: 433MHz RF receiver module.
d. UART Communication Module:
•	Description: Facilitates communication between the STM32 microcontroller and the ITS for transmitting tire pressure data and alerts.
Configuration Steps
1. Sensor Data Acquisition:
•	Direct TPMS Sensors: If using direct sensors, these can provide analog or digital outputs representing the tire pressure.
•	RF TPMS Sensors: These sensors transmit data wirelessly to an RF receiver module connected to the STM32 microcontroller.
2. STM32 Configuration:
•	GPIO Pins: Configure GPIO pins to read data from direct sensors.
•	ADC Configuration: If using analog sensors like the MPX5700AP, configure the ADC to read the sensor output.
•	RF Receiver: If using wireless sensors, configure the STM32 to read data from the RF receiver module.
3. UART Communication:
•	Configure the UART peripheral on the STM32 for communication with the ITS to transmit tire pressure data.
Warning Lights Blinks
he warning lights are critical for alerting the driver to various issues such as maintenance needs or emergency situations. These lights can indicate problems like low oil pressure, engine overheating, low tire pressure, or other system malfunctions. Integrating these warning lights with an Intelligent Transportation System (ITS) allows for centralized monitoring and alerting, improving the efficiency and safety of the vehicle operation.
Components Used
1.	STM32 Microcontroller:
o	Description: Acts as the central processing unit that receives signals from various sensors and controls the warning lights.
2.	Various Sensors:
o	Oil Pressure Sensor: Detects low oil pressure.
o	Engine Temperature Sensor: Detects overheating.
o	TPMS (Tire Pressure Monitoring System): Detects low tire pressure.
o	Brake Fluid Level Sensor: Detects low brake fluid.
o	Battery Voltage Sensor: Monitors battery health.
3.	LED Indicators:
o	Description: Visual indicators for warning lights, installed on the driver's dashboard.
o	Examples: Red for critical issues, yellow for warnings.
4.	I2C LCD Display:
o	Description: Displays detailed messages about the warnings and issues detected.
o	Examples: 16x2 LCD with PCF8574 backpack for I2C communication.
5.	UART Communication Module:
o	Description: For communication between the STM32 and the ITS.
6.	Relay Module:
o	Description: Controls the high-power warning lights based on the signals from the STM32 microcontroller.
7.	Power Supply:
o	Description: Provides power to the sensors, microcontroller, and other components.
8.	Wiring and Connectors:
o	Description: Used for connecting all components together.
Configuration Steps
1.	Sensor Data Acquisition:
o	Each sensor is connected to the STM32 microcontroller via GPIO pins or ADC channels.
o	Sensors continuously monitor their respective parameters and send data to the microcontroller.
2.	Warning Light Control:
o	Based on the sensor data, the STM32 determines if any parameter is outside safe operating conditions.
o	If a parameter is out of range, the STM32 activates the corresponding warning light using GPIO pins.
o	A relay module may be used to control high-power warning lights.
3.	I2C LCD Display:
o	The STM32 communicates with the I2C LCD to display detailed messages about the issue detected.
o	The messages provide specific information about the nature of the problem (e.g., "Low Oil Pressure", "Engine Overheating").
4.	UART Communication:
o	The STM32 also sends warning messages to the ITS via UART for centralized logging and monitoring.
o	The ITS can then alert the driver through the driver's display.


Weight Limit Indicator
In the Weight Limit Indicator system linked to the Intelligent Transportation System (ITS), the primary objective is to ensure that the city bus operates within safe load parameters by monitoring the weight distribution of passengers and cargo. Here's a more detailed explanation of how it works:
Components and Operation:
1.	Load Sensors(HX711 Weighing Sensor ADC Module):
o	Load sensors are strategically placed within the bus, typically near the axles or suspension system, to measure the weight exerted on different parts of the vehicle.
o	These sensors can be strain gauge load cells or other types of load sensors capable of accurately measuring weight.
2.	STM32 Microcontroller:
o	The STM32 microcontroller serves as the central processing unit responsible for collecting data from the load sensors and processing it to determine if the weight limits are exceeded.
o	It continuously monitors the sensor readings and compares them to predefined weight limits programmed into its firmware.
3.	UART Communication Module:
o	The microcontroller communicates with the ITS via UART (Universal Asynchronous Receiver-Transmitter) communication protocol.
o	It transmits weight limit status and related alerts to the ITS for display to the driver.
4.	Driver's Displays (ITS System):
o	The ITS system includes display panels or screens installed within the driver's compartment.
o	When the microcontroller detects that the weight limit is exceeded or approaching the threshold, it sends alert messages to the ITS.
5.	Alert Messages:
o	The microcontroller generates alert messages indicating the weight limit status, such as "Weight Limit Exceeded" or "Approaching Weight Limit."
o	These messages are transmitted to the ITS system, where they are displayed prominently on the driver's displays.
6.	Visual and Audible Alerts:
o	In addition to displaying alert messages, the ITS system may also include visual and audible alarms to attract the driver's attention.
o	Visual alerts could be flashing lights or color-coded indicators, while audible alerts could be alarms or beeping sounds.
Operation Flow:
1.	Continuous Monitoring:
o	The STM32 microcontroller continuously reads data from the load sensors, which provide real-time information about the weight distribution inside the bus.
2.	Comparison with Thresholds:
o	The microcontroller compares the measured weight data with predefined weight limits stored in its memory.
o	If the measured weight exceeds or approaches these limits, the microcontroller initiates the alert process.
3.	Alert Generation:
o	When the weight limit is exceeded or nearing, the microcontroller generates alert messages.
o	These messages are formatted and transmitted via UART communication to the ITS system.
4.	Display to the Driver:
o	The ITS system receives the alert messages and displays them prominently on the driver's displays.
o	The driver can quickly see the alerts and take appropriate action, such as redistributing passenger weight or unloading cargo.
ITS(Intelligent Transportation System):-
The ITS (Intelligent Transportation System) is a comprehensive system that integrates various technologies to improve the efficiency, safety, and overall performance of transportation systems. It encompasses a wide range of components, including sensors, communication networks, control systems, and user interfaces, to gather, process, and disseminate information related to transportation operations. Here's a detailed explanation of the ITS concept:
Components of ITS:
1.	Sensors:
o	ITS utilizes various sensors such as cameras, radar, lidar, and inductive loop detectors to monitor traffic flow, vehicle speed, occupancy levels, and environmental conditions. These sensors provide real-time data that is crucial for traffic management and control.
2.	Communication Networks:
o	High-speed communication networks, including fiber optics, Wi-Fi, cellular networks, and dedicated short-range communication (DSRC), facilitate data exchange between different components of the ITS. These networks enable seamless communication between vehicles, infrastructure, and control centers.
3.	Control Systems:
o	Control systems within the ITS manage traffic signals, variable message signs (VMS), ramp meters, and other infrastructure elements to optimize traffic flow, minimize congestion, and enhance safety. These systems use real-time data to adjust traffic signal timings and provide dynamic traffic guidance to motorists.
4.	Data Processing and Analysis:
o	ITS systems collect and process vast amounts of data from sensors and other sources to generate actionable insights. Advanced analytics algorithms analyze this data to detect traffic patterns, predict congestion, and identify areas for improvement.
5.	User Interfaces:
o	User interfaces provide drivers, transportation operators, and other stakeholders with access to ITS information and control functionalities. These interfaces include digital displays, mobile applications, websites, and in-vehicle systems that present traffic updates, navigation assistance, and emergency alerts.
6.	Integration Platforms:
o	Integration platforms serve as the backbone of the ITS, enabling seamless integration and interoperability between different subsystems and components. These platforms facilitate data sharing, system coordination, and collaborative decision-making across multiple agencies and stakeholders.






